#ifndef _CAMERA_PARAMETERS_H
#define _CAMERA_PARAMETERS_H

#include <vector>
using namespace std;

namespace pandora {

struct Size {
    int width;
    int height;

    Size() {
        width = 0;
        height = 0;
    }

    Size(int w, int h) {
        width = w;
        height = h;
    }
};

enum {
    KEY_SUPPORTED_PICTURE_SIZES,
    KEY_PICTURE_FORMAT,
    KEY_SUPPORTED_PICTURE_FORMATS,
    KEY_JPEG_THUMBNAIL_WIDTH,
    KEY_JPEG_THUMBNAIL_HEIGHT,
    KEY_SUPPORTED_JPEG_THUMBNAIL_SIZES,
    KEY_JPEG_THUMBNAIL_QUALITY,
    KEY_JPEG_QUALITY,
    KEY_ROTATION,
    KEY_GPS_LATITUDE,
    KEY_GPS_LONGITUDE,
    KEY_GPS_ALTITUDE,
    KEY_GPS_TIMESTAMP,
    KEY_GPS_PROCESSING_METHOD,
    KEY_WHITE_BALANCE,
    KEY_SUPPORTED_WHITE_BALANCE,
    KEY_EFFECT,
    KEY_SUPPORTED_EFFECTS,
    KEY_ANTIBANDING,
    KEY_SUPPORTED_ANTIBANDING,
    KEY_SCENE_MODE,
    KEY_SUPPORTED_SCENE_MODES,
    KEY_FLASH_MODE,
    KEY_SUPPORTED_FLASH_MODES,
    KEY_FOCUS_MODE,
    KEY_SUPPORTED_FOCUS_MODES,
    KEY_MAX_NUM_FOCUS_AREAS,
    KEY_FOCUS_AREAS,
    KEY_FOCAL_LENGTH,
    KEY_HORIZONTAL_VIEW_ANGLE,
    KEY_VERTICAL_VIEW_ANGLE,
    KEY_EXPOSURE_COMPENSATION,
    KEY_MAX_EXPOSURE_COMPENSATION,
    KEY_MIN_EXPOSURE_COMPENSATION,
    KEY_EXPOSURE_COMPENSATION_STEP,
    KEY_AUTO_EXPOSURE_LOCK,
    KEY_AUTO_EXPOSURE_LOCK_SUPPORTED,
    KEY_AUTO_WHITEBALANCE_LOCK,
    KEY_AUTO_WHITEBALANCE_LOCK_SUPPORTED,
    KEY_MAX_NUM_METERING_AREAS,
    KEY_METERING_AREAS,
    KEY_VIDEO_FRAME_FORMAT,
    KEY_VIDEO_SIZE,
    KEY_SUPPORTED_VIDEO_SIZES,
    KEY_PREFERRED_PREVIEW_SIZE_FOR_VIDEO,
    KEY_MAX_NUM_DETECTED_FACES_HW,
    KEY_MAX_NUM_DETECTED_FACES_SW,
    KEY_RECORDING_HINT,
    KEY_VIDEO_SNAPSHOT_SUPPORTED,
    KEY_VIDEO_STABILIZATION,
    KEY_VIDEO_STABILIZATION_SUPPORTED,
    KEY_LIGHTFX,
    KEY_BEAUTY_FACE,
    KEY_BEAUTY_FACE_LEVEL,
    KEY_LONG_SHOT,
    KEY_SMART_SHOT,
    KEY_NIGHT_SHOT,
    KEY_FAIRLIGHT_MODE,
    KEY_WATER_MARK,
    KEY_QC_SINGLE_BOKEH,
    KEY_QC_SINGLE_BOKEH_LEVEL,
    KEY_INVALID,
};

enum {
    MODE_OFF,
    MODE_ON,
    MODE_MANUAL,
    MODE_INVALID,
};

class CameraParameters
{
public:
    CameraParameters();
    ~CameraParameters();

    void set(int key, int value);
    int get(int key) const;

private:
	int KEY[KEY_INVALID];
};

};

#endif
