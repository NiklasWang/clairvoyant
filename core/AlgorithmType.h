#ifndef _ALGORITHM_TYPES_H_
#define _ALGORITHM_TYPES_H_

#include <stdint.h>

namespace pandora {

enum AlgType {
    ALG_BEAUTY_FACE,
    ALG_BEAUTY_FACE_CAP,
    ALG_AGE_GENDER_DETECTION,
    ALG_HDR_CHECKER,
    ALG_HDR,
    ALG_IMAGE_STABILIZATION,
    ALG_SMART_SELECT,
    ALG_SMART_SHOT,
    ALG_NIGHT_SHOT,
    ALG_ANTI_SHAKING,
    ALG_VIDEO_STAB_PREVIEW,
    ALG_VIDEO_STAB_RECORDING,
    ALG_PICTURE_ZOOM,
    ALG_FAIR_LIGHT,
    ALG_MICRO_PLASTIC,
    ALG_PICTURE_ZOOM2,
    ALG_STILL_BOKEH,
    ALG_STILL_BOKEHA,
    ALG_RT_BOKEH,
    ALG_DUAL_CAM_NIGHT_SHOT,
    ALG_SUPER_RESOLUTION,
    ALG_SINGLE_BOKEH,
    ALG_SINGLE_BOKEH_CAP,
    ALG_UTILS,
    ALG_WATER_MARK,
    ALG_MAX_INVALID,
};

enum AlgMaskItems {
    ALG_MASK_NONE_ALORITHM = 0,
    ALG_MASK_BEAUTY_FACE   = 0x01 << ALG_BEAUTY_FACE,
    ALG_MASK_BEAUTY_FACE_CAP      = 0x01 << ALG_BEAUTY_FACE_CAP,
    ALG_MASK_AGE_GENDER    = 0x01 << ALG_AGE_GENDER_DETECTION,
    ALG_MASK_HDR_CHECKER   = 0x01 << ALG_HDR_CHECKER,
    ALG_MASK_HDR           = 0x01 << ALG_HDR,
    ALG_MASK_IMAGE_STABILIZATION  = 0x01 << ALG_IMAGE_STABILIZATION,
    ALG_MASK_SMART_SELECT  = 0x01 << ALG_SMART_SELECT,
    ALG_MASK_SMART_SHOT    = 0x01 << ALG_SMART_SHOT,
    ALG_MASK_NIGHT_SHOT    = 0x01 << ALG_NIGHT_SHOT,
    ALG_MASK_ANTI_SHAKING  = 0x01 << ALG_ANTI_SHAKING,
    ALG_MASK_VIDEO_STAB_PREVIEW   = 0x01 << ALG_VIDEO_STAB_PREVIEW,
    ALG_MASK_VIDEO_STAB_RECORDING = 0x01 << ALG_VIDEO_STAB_RECORDING,
    ALG_MASK_PICTURE_ZOOM  = 0x01 << ALG_PICTURE_ZOOM,
    ALG_MASK_FAIR_LIGHT    = 0x01 << ALG_FAIR_LIGHT,
    ALG_MASK_MICRO_PLASTIC = 0x01 << ALG_MICRO_PLASTIC,
    ALG_MASK_PICTURE_ZOOM2 = 0x01 << ALG_PICTURE_ZOOM2,
    ALG_MASK_STILL_BOKEH   = 0x01 << ALG_STILL_BOKEH,
    ALG_MASK_STILL_BOKEHA  = 0x01 << ALG_STILL_BOKEHA,
    ALG_MASK_RT_BOKEH      = 0x01 << ALG_RT_BOKEH,
    ALG_MASK_DUAL_CAM_NIGHT_SHOT  = 0x01 << ALG_DUAL_CAM_NIGHT_SHOT,
    ALG_MASK_SUPER_RESOLUTION     = 0x01 << ALG_SUPER_RESOLUTION,
    ALG_MASK_ALG_SINGLE_BOKEH     = 0x01 << ALG_SINGLE_BOKEH,
    ALG_MASK_ALG_SINGLE_BOKEH_CAP = 0x01 << ALG_SINGLE_BOKEH_CAP,
    ALG_MASK_UTILS         = 0x01 << ALG_UTILS,
    ALG_MASK_MASK_ALL_ALGORITHM   = 0x7FFF,
};

typedef uint32_t AlgMask;

inline AlgMask getAlgMask(AlgType type) {
    return 0x01 << type;
}

enum AlgCategory {
    ALG_CATEGORY_SIGNAL_FRAME,
    ALG_CATEGORY_MULTI_FRAME,
    ALG_CATEGORY_MAX_INVALID,
};

AlgType getValidType(AlgType type);
const char *getAlgName(AlgType type);

};

#endif
